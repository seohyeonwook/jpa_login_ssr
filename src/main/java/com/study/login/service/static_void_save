 public void save(MemberDto memberDto) {

        MemberEntity memberEntity = MemberEntity.toMemberEntity(memberDto);

        memberRepository.save(memberEntity);
    }




static 메서드는 클래스 자체에 속하는 메서드라서 객체의 상태나 인스턴스 변수에 접근할 수 없어요. 쉽게 말하면,
 static 메서드는 클래스가 직접 사용하는 고정된 도구 같은 거예요. 그래서 인스턴스를 생성하지 않고도 사용할 수 있지만,
  인스턴스와 관련된 작업은 할 수 없어요.

예를 들어
학교에 있는 칠판을 생각해봐요. 칠판(=static)은 모든 학생(=인스턴스)이 공유해요.
 누군가 칠판에 글을 쓰면 다른 사람도 볼 수 있죠. 반대로, 학생 개인의 노트는 각 학생만 가지고 있어요.
  칠판(static)에는 학생 개인의 기록을 남길 수 없어요. 왜냐하면 칠판은 모든 학생과 연결된 공통된 도구일 뿐,
   특정 학생의 기록을 저장하는 게 아니니까요.

왜 static을 붙이면 안 될까?
save 메서드는 MemberService 인스턴스의 상태나 인스턴스 변수를 사용하거나 관리해야 할 수 있어요.
 예를 들어, 어떤 MemberRepository 객체를 주입받아서 사용하는 경우처럼요.
  그런데 static으로 만들어버리면 save 메서드는 특정 인스턴스의 상태에 접근할 수 없게 돼요.
   그냥 정적인 도구로만 남아서, 인스턴스의 기능을 전혀 활용할 수 없게 되죠.

그래서
static 메서드는 주로 공용 유틸리티처럼 동작해야 할 때 사용해요.
save처럼 객체의 상태를 관리하거나 조작해야 하는 메서드는 인스턴스 메서드로 만들어야 해요.
이런 이유로 static을 사용하면 안 되는 거예요!